generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course {
  crseCode  String   @id @map("crse_code") @db.VarChar(5)
  crseName  String   @map("crse_name") @db.VarChar(100)
  offeredBy String   @map("offered_by") @db.VarChar(5)
  crseFee   Decimal  @map("crse_fee") @db.Decimal(7, 2)
  labFee    Decimal? @map("lab_fee") @db.Decimal(7, 2)

  students Student[]
}

model department {
  deptCode         String    @id @map("dept_code") @db.VarChar(5)
  deptName         String    @map("dept_name") @db.VarChar(100)
  hod              String    @db.Char(4)
  noOfStaff        Int?      @map("no_of_staff")
  maxStaffStrength Int?      @map("max_staff_strength")
  budget           Decimal?  @db.Decimal(9, 2)
  expenditure      Decimal?  @db.Decimal(9, 2)
  hodApptDate      DateTime? @map("hod_appt_date") @db.Date

  staff            staff[]   @relation("DepartmentStaff")
  hodStaff staff @relation("departmentHodToStaff", fields: [hod], references: [staffNo], onDelete: NoAction, onUpdate: NoAction, map: "dept_hod_fk")

}

model staff {
  staffNo           String   @id @map("staff_no") @db.Char(4)
  staffName         String   @map("staff_name") @db.VarChar(100)
  supervisorStaffNo String?  @map("supervisor_staff_no") @db.Char(4)
  dob               DateTime @db.Date
  grade             String   @db.VarChar(5)
  maritalStatus     String   @map("marital_status") @db.VarChar(1)
  pay               Decimal? @db.Decimal(7, 2)
  allowance         Decimal? @db.Decimal(7, 2)
  hourlyRate        Decimal? @map("hourly_rate") @db.Decimal(7, 2)
  gender            String   @db.Char(1)
  citizenship       String   @db.VarChar(10)
  joinYr            Int      @map("join_yr")
  deptCode          String   @map("dept_code") @db.VarChar(5)
  typeOfEmployment  String   @map("type_of_employment") @db.VarChar(2)
  highestQln        String   @map("highest_qln") @db.VarChar(10)
  designation       String   @db.VarChar(20)

  department        department @relation("DepartmentStaff", fields: [deptCode], references: [deptCode])
  departmentHodToStaff department[] @relation("departmentHodToStaff")

  staffDependent    StaffDependent[]
  coordinatesModule module[] @relation("ModuleCoordinator")
}

model staffBackup {
  staffNo          String   @id @map("staff_no") @db.Char(4)
  staffName        String   @map("staff_name") @db.VarChar(100)
  supervisor       String?  @db.Char(4)
  dob              DateTime @db.Date
  grade            String   @db.VarChar(5)
  maritalStatus    String   @map("marital_status") @db.VarChar(1)
  pay              Decimal? @db.Decimal(7, 2)
  allowance        Decimal? @db.Decimal(7, 2)
  hourlyRate       Decimal? @map("hourly_rate") @db.Decimal(7, 2)
  gender           String   @db.Char(1)
  citizenship      String   @db.VarChar(10)
  joinYr           Int      @map("join_yr")
  deptCode         String   @map("dept_code") @db.VarChar(5)
  typeOfEmployment String   @map("type_of_employment") @db.VarChar(2)
  highestQln       String   @map("highest_qln") @db.VarChar(10)
  designation      String   @db.VarChar(20)

  @@map("staff_backup")
}

model userAccount {
  id        Int    @id
  accountNo String @map("account_no") @db.VarChar(6)
  role      Int
  password  String @db.VarChar(255)

  @@map("user_account")
}

model userRole {
  id   Int    @id
  name String @db.VarChar(25)

  @@map("user_role")
}

model StaffDependent {
  staff_no       String @db.Char(4)       @map("staff_no")
  dependent_name String @db.VarChar(30)   @map("dependent_name")
  relationship   String @db.VarChar(20)

  staff          staff  @relation(fields: [staff_no], references: [staffNo], onDelete: NoAction, onUpdate: NoAction, map: "staff_dependent_staff_no_fk")
  @@id([staff_no, dependent_name])
  @@map("staff_dependent")
}


model Country {
  country_name String @id @db.VarChar(30) @map("country_name")
  language     String @db.VarChar(30)
  region       String @db.VarChar(30)
 students Student[]
  @@map("country")
}

model Student {
  adm_no        String   @id @db.Char(4)
  stud_name     String   @db.VarChar(30)
  gender        String   @db.Char(1)
  address       String   @db.VarChar(100)
  mobile_phone  String   @db.Char(8)
  home_phone    String   @db.Char(8)
  dob           DateTime @db.Date
  nationality   String   @db.VarChar(30)
  crse_code     String   @db.VarChar(5)
 // Relations
 studModPerformances StudModPerformance[]
  course   course  @relation(fields: [crse_code], references: [crseCode], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_course")
  country  Country @relation(fields: [nationality], references: [country_name], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_country")

  @@map("student")
}

model StudModPerformance {
  adm_no         String @db.Char(4)
  mod_registered String @db.VarChar(10)
  mark           Int
  grade          String @db.Char(2)

student Student @relation(fields: [adm_no], references: [adm_no], onDelete: NoAction, onUpdate: NoAction, map: "fk_stud_mod_perf_student")
  module  module  @relation(fields: [mod_registered], references: [mod_code], onDelete: NoAction, onUpdate: NoAction, map: "fk_stud_mod_perf_module")
  @@id([adm_no, mod_registered]) // composite primary key
  @@map("stud_mod_performance")
}

model module {
  mod_code    String  @id @map("mod_code") @db.VarChar(10)
  mod_name    String  @map("mod_name") @db.VarChar(100)
  credit_unit Int     @map("credit_unit")
  mod_coord   String? @map("mod_coord") @db.Char(4)

  // Coordinator relation (optional)
  coordinator staff? @relation("ModuleCoordinator", fields: [mod_coord], references: [staffNo])
studModPerformances StudModPerformance[]
  // Relations for prerequisite table (two roles)

  mainOf PreRequisite[] @relation("ModuleMain")  // modules where this module is the main
  preOf  PreRequisite[] @relation("ModulePre")   // modules where this module is the prerequisite

  @@map("module")
}

model PreRequisite {
  mod_code  String @db.VarChar(10) @map("mod_code")
  requisite String @db.VarChar(10)

  // Relation to module where this prerequisite entry is for the main module
  module            module @relation("ModuleMain", fields: [mod_code], references: [mod_code])
  
  // Relation to module where this prerequisite entry refers to the prerequisite module
  prerequisiteModule module @relation("ModulePre", fields: [requisite], references: [mod_code])

  @@id([mod_code, requisite])
  @@map("pre_requisite")
}
